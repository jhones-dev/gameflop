type Query {
  Users(
    where: UserWhereInput
    include: UserIncludeInput
    orderBy: UserOrderByInput
    skip: Int
    take: Int
  ): [UserArrayResult]
}

type Mutation {
  AddUser(
    name: String!
    accountId: Int!
    photo: String
    linkedAccounts: LinkedAccountsInput
    badges: [String]
    favoriteList: [Int]
    permission: Int
  ): UserOperationResult!
  AddAccountWithUser(
    name: String!
    email: String!
    password: String
    photo: String
    linkedAccounts: LinkedAccountsInput
    badges: [String]
    favoriteList: [Int]
    permission: Int
  ): UserOperationResult!
}

union UserResult = User | BaseError | InputError | InternalError
union UserArrayResult = UserList | BaseError | InputError | InternalError
union UserOperationResult =
    UserResultSuccess
  | BaseError
  | InputError
  | InternalError

type User {
  id: Int!
  accountId: Int!
  name: String!
  photo: String
  linkedAccounts: JSON
  badges: [String]
  favoriteList: [Int]
  permission: Int!
}

type UserList {
  users: [User]
}

type UserResultSuccess {
  statusCode: String!
  message: String!
}

input UserInput {
  id: Int
  accountId: Int
  name: String
  photo: String
  linkedAccounts: JSON
  badges: [String]
  favoriteList: [Int]
  permission: Int
}

input UserWhereInput {
  AND: [UserInput]
  OR: [UserInput]
  NOT: [UserInput]
  id: Int
  accountId: Int
  name: String
  photo: String
  linkedAccounts: JSON
  badges: [String]
  favoriteList: [Int]
  permission: Int
}

input UserIncludeInput {
  _count: Boolean
  accounts: Boolean
  reviews: Boolean
}

input UserOrderByInput {
  id: OrderBy
  accountId: OrderBy
  name: OrderBy
  photo: OrderBy
  linkedAccounts: OrderBy
  badges: OrderBy
  favoriteList: OrderBy
  permission: OrderBy
}

input LinkedAccountsInput {
  apple: ID
  facebook: ID
  google: ID
  steam: ID
}
