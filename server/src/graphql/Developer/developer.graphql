type Query {
  Developers(
    where: DeveloperWhereInput
    include: DeveloperIncludeInput
    orderBy: DeveloperOrderByInput
    skip: Int
    take: Int
  ): DeveloperArrayResult
}

type Mutation {
  AddDeveloper(name: String!): DeveloperOperationResult
}

union DeveloperResult = Developer | BaseError | InputError | InternalError
union DeveloperArrayResult =
    DeveloperList
  | BaseError
  | InputError
  | InternalError
union DeveloperOperationResult =
    DeveloperResultSuccess
  | BaseError
  | InputError
  | InternalError

type Developer {
  id: Int!
  name: String!
}

type DeveloperList {
  developers: [Developer]
}

type DeveloperResultSuccess {
  statusCode: String!
  message: String!
}

input DeveloperInput {
  id: Int
  name: String
}

input DeveloperWhereInput {
  AND: [DeveloperInput]
  OR: [DeveloperInput]
  NOT: [DeveloperInput]
  id: Int
  name: String
}

input DeveloperIncludeInput {
  _count: Boolean
  games: Boolean
}

input DeveloperOrderByInput {
  id: OrderBy
  name: OrderBy
}
